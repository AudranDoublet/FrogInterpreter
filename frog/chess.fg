graphics = import("graphics");

graphics.InitGraphics();
pieces = include("pieces.fg");

# constants
tex_size = 55;

function test_valid(board, player, king)
{
	kx, ky = king;

	foreach(x : range(8))
	foreach(y : range(8))
	{
		piece = board[x + y * 8];
		if(!piece || piece.team == player) continue;

		foreach((vx, vy) : piece.moves(board, x, y))
			if(vx == kx && vy == ky)
				return False;
	}

	return True;
}

function test_move(board, from, to, player, king)
{
	x1, y1 = from;
	x2, y2 = to;

	if(from == king)
		king = to;

	nboard = []
	foreach (piece : board)
		nboard.append(piece);

	nboard[x2 + y2 * 8] = nboard[x1 + y1 *8];
	nboard[x1 + y1 * 8] = None;

	return test_valid(nboard, player, king);
}

function filter_moves(board, from, moves, player)
{
	king = None;

	foreach (x : range(8))
	foreach (y : range(8))
	{
		p = board[x + y * 8];
		if(p && p.type == 4 && p.team == player)
			king = x, y;
	}

	L = [];

	foreach((x, y) : moves)
	{
		if(test_move(board, from, (x, y), player, king))
			L.append((x, y));
	}

	return L;
}

function is_checkmate(board, player)
{
	king = None;

	foreach (x : range(8))
	foreach (y : range(8))
	{
		p = board[x + y * 8];
		if(p && p.type == 4 && p.team == player)
			king = x, y;
	}

	if(test_valid(board, player, king))
		return 0, king;

	foreach (x : range(8))
	foreach (y : range(8))
	{
		piece = board[x + y * 8];

		if(!piece || piece.team != player) continue;
		foreach(move : piece.moves(board, x, y))
			if(test_move(board, (x, y), move, player, king))
				return 2, king;
	}

	return 1, king;
}

class ChessGame
{
	function __init(this, w)
	{
		this.window = w;
		this.board = pieces.InitPieces();

		this.texture_black 
			= graphics.LoadTexture("../chess_assets/bg_black.png");
		this.texture_whitei
			= graphics.LoadTexture("../chess_assets/bg_white.png");
		this.texture_hwhite
			= graphics.LoadTexture("../chess_assets/bg_normal.png");
		this.texture_hred
			= graphics.LoadTexture("../chess_assets/bg_attack.png");
		this.texture_hgreen
			= graphics.LoadTexture("../chess_assets/bg_move.png");

		this.texture
			= graphics.CreateTexture(width, height, graphics.color_white);

		this.highlight = None;
		this.kings = [];
		this.selected = None;
		this.player = 1;
		this.moves = None;
		this.end = False;
	}

	function play(this, a, b)
	{
		x, y = a;
		vx, vy = b;

		this.board[vx + vy * 8] = this.board[x + y * 8];
		this.board[x + y * 8] = None;

		this.player = 1 - this.player;
		this.moves = None;
		this.selected = None;

		this.kings = [];
		status, pos = is_checkmate(this.board, 0);

		if(status)
			this.kings.append(pos);

		if(status == 1)
		{
			this.end = True;
			return;
		}

		status, pos = is_checkmate(this.board, 1);

		if(status)
			this.kings.append(pos);

		if(status == 1)
		{
			this.end = True;
			return;
		}
	}

	function click(this, x, y)
	{
		if(this.selected)
		{
			foreach((vx, vy) : this.moves)
				if(vx == x && vy == y)
				{
					this.play(this.selected, (vx, vy));
					return;
				}
		}

		piece = this.board[x + y * 8];

		if(!piece || piece.team != this.player)
			return;

		this.selected = (x, y);
		this.moves = piece.moves(this.board, x, y);
		this.moves = filter_moves(this.board, (x, y), this.moves, this.player);
	}

	function draw(this)
	{
		tex = this.texture;

		foreach(x : range(8))
		{
			foreach(y : range(8))
			{
				vx, vy = x * tex_size, y * tex_size;

				if(x & 1 == y & 1)
				{
					texture = this.texture_white;
				}
				else
				{
					texture = this.texture_black;
				}

				tex.BlitTexture(texture, vx, vy);
				piece = this.board[x + y * 8];

				if(piece)
				{
					tex.BlitTexture(piece.texture, vx, vy);
				}

				if(this.end)
				{
					tex.BlitTexture(this.texture_hwhite, vx, vy);
				}
			}
		}

		if(this.highlight && !this.end)
		{
			vx, vy = this.highlight;
			piece = this.board[vx + vy * 8];

			if(piece && piece.team == this.player)
			{
				vx, vy = vx * tex_size, vy * tex_size;
				tex.BlitTexture(this.texture_hwhite, vx, vy);
			}
		}	

		if(this.moves && !this.end)
		{
			foreach((x, y) : this.moves)
			{
				texture = this.texture_hgreen;
				if(this.board[x + y * 8])
					texture = this.texture_hred;

				vx, vy = x * tex_size, y * tex_size;
				tex.BlitTexture(texture, vx, vy);
			}
		}

		foreach((x, y) : this.kings)
		{
			vx, vy = x * tex_size, y * tex_size;
			texture = this.texture_hred;

			tex.BlitTexture(texture, vx, vy);
		}
		
		this.window.FlushWindow(this.texture);
	}
}

(width, height) = (tex_size * 8, tex_size * 8);

w = graphics.Window("FrogChess", width, height);
w.OpenWindow();

game = ChessGame(w);

foreach(type, x, y : graphics.WaitEvents())
{
	if(type == 0)
		break;

	if(type == 1)
	{
		x //= 55;
		y //= 55;

		if(x < 0 || x >= 8 || y < 0 || y >= 8)
			continue;

		game.highlight = (x, y);
	}

	if(type == 2)
	{
		x //= 55;
		y //= 55;

		if(x < 0 || x >= 8 || y < 0 || y >= 8)
			continue;

		game.click(x, y);
	}

	game.draw();

	if(game.end)
		break;
}

foreach(type, x, y : graphics.WaitEvents())
{
	if(type == 0)
		break;

	game.draw();
}
