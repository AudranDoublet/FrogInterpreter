graphics = import("graphics");

black_knight = graphics.LoadTexture("../chess_assets/knight_black.png");
black_king = graphics.LoadTexture("../chess_assets/king_black.png");
black_queen = graphics.LoadTexture("../chess_assets/queen_black.png");
black_rook = graphics.LoadTexture("../chess_assets/rook_black.png");
black_bishop = graphics.LoadTexture("../chess_assets/bishop_black.png");
black_pawn = graphics.LoadTexture("../chess_assets/pawn_black.png");

white_knight = graphics.LoadTexture("../chess_assets/knight_white.png");
white_king = graphics.LoadTexture("../chess_assets/king_white.png");
white_queen = graphics.LoadTexture("../chess_assets/queen_white.png");
white_rook = graphics.LoadTexture("../chess_assets/rook_white.png");
white_bishop = graphics.LoadTexture("../chess_assets/bishop_white.png");
white_pawn = graphics.LoadTexture("../chess_assets/pawn_white.png");

function InitPieces()
{
	board = [
		Rook(black_rook, 0),
		Knight(black_knight, 0),
		Bishop(black_bishop, 0),
		Queen(black_queen, 0),
		King(black_king, 0),
		Bishop(black_bishop, 0),
		Knight(black_knight, 0),
		Rook(black_rook, 0)
	];

	foreach(i : range(8))
		board.append(Pawn(black_pawn, 0));

	board += [None] * 32;

	foreach(i : range(8))
		board.append(Pawn(white_pawn, 1));

	board += [
		Rook(white_rook, 1),
		Knight(white_knight, 1),
		Bishop(white_bishop, 1),
		Queen(white_queen, 1),
		King(white_king, 1),
		Bishop(white_bishop, 1),
		Knight(white_knight, 1),
		Rook(white_rook, 1)
	];

	return board;
}

function is_in(x, y)
{
	return x >= 0 && x < 8 && y >= 0 && y < 8;
}

function moves_way(team, pieces, x, y, dx, dy)
{
	vx, vy = x + dx, y + dy;

	while( is_in(vx, vy) )
	{
		piece = pieces[vx + vy * 8];

		if(piece)
		{
			if(piece.team != team)
				yield (vx, vy);
			return;
		}
		else
		{
			yield (vx, vy);
		}

		vx += dx;
		vy += dy;
	}
}

function moves_diagonal(team, pieces, x, y)
{
	foreach(dx : range(-1, 2, 2))
		foreach(dy : range(-1, 2, 2))
			foreach(v : moves_way(team, pieces, x, y, dx, dy))
				yield v;
}

function moves_lines(team, pieces, x, y)
{
	foreach(dx : range(-1, 2, 1))
		foreach(dy : range(-1, 2, 1))
		{
			if(dx == dy) continue;
			foreach(v : moves_way(team, pieces, x, y, dx, dy))
			{
				yield v;
			}
		}
}

knight_moves = [(-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2),  (1, -2), (-1, 2), (1, 2)];

class Knight
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 0;
	}

	function moves(this, pieces, x, y)
	{
		L = [];

		foreach((dx, dy) : knight_moves)
		{
			vx, vy = x + dx, y + dy;

			if(!is_in(vx, vy)) continue;
			piece = pieces[vx + vy * 8];

			if(piece && piece.team == this.team) continue;
			L.append((vx, vy));
		}

		return L;
	}
}

class Pawn
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 1;
	}

	function moves(this, pieces, x, y)
	{
		L = []
		diff = if(this.team) -8 else 8;
		sd = if(this.team) -1 else 1;

		if(!pieces[x + y * 8 + diff])
		{
			L.append((x, y + sd));

			if((y == 1 && this.team == 0) || (y == 6 && this.team == 1))
			{
				if(!pieces[x + y * 8 + diff * 2])
					L.append((x, y + sd * 2));
			}
		}

		if(x < 7)
		{
			piece = pieces[x + 1 + y * 8 + diff];

			if(piece && piece.team != this.team)
				L.append((x + 1, y + sd));
		}

		if(x > 0)
		{
			piece = pieces[x - 1 + y * 8 + diff];

			if(piece && piece.team != this.team)
				L.append((x - 1, y + sd));
		}

		return L;
	}
}

class Rook
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 2;
	}

	function moves(this, pieces, x, y)
	{
		L = []
		foreach( (x, y) : moves_lines(this.team, pieces, x, y) )
			L.append((x, y));

		return L;
	}
}

class Bishop
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 3;
	}

	function moves(this, pieces, x, y)
	{
		L = []
		foreach( (x, y) : moves_diagonal(this.team, pieces, x, y) )
			L.append((x, y));

		return L;
	}
}

class King
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 4;
	}

	function moves(this, pieces, x, y)
	{
		L = []
		foreach(dx : range(-1, 2, 1))
			foreach(dy : range(-1, 2, 1))
			{
				vx, vy = dx + x, dy + y;

				if(!is_in(vx, vy)) continue;
				piece = pieces[vx + vy * 8];

				if(piece && piece.team == this.team) continue;
				L.append((vx, vy));
			}

		return L;
	}
}

class Queen
{
	function __init(this, texture, team)
	{
		this.texture = texture;
		this.team = team;
		this.type = 5;
	}

	function moves(this, pieces, x, y)
	{
		L = []

		foreach( (vx, vy) : moves_diagonal(this.team, pieces, x, y) )
			L.append((vx, vy));

		foreach( (vx, vy) : moves_lines(this.team, pieces, x, y) )
			L.append((vx, vy));


		return L;
	}
}
